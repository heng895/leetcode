    class Solution {
        public List<List<Integer>> threeSum(int[] nums) {
//            HashMap<Integer, Integer> map = new HashMap<>();
//
//            for (int i : nums) {
//                map.put(i, map.getOrDefault(i, 0) + 1);
//            }
//            for (int i : nums) {
//                map.put(i, map.get(i) - 1);
//                int target = -i;
//                for (int key:map.keySet()){
//
//                }
//            }
            List<List<Integer>> res = new ArrayList<>();
            Arrays.sort(nums);
            for (int i = 0; i < nums.length; i++) {
                if (nums[i] > 0) return res;
                if (i > 0 && nums[i] == nums[i - 1]) continue;
                int l = i + 1, r = nums.length - 1;
                while (l < r) {
                    int target = -nums[i];
                    if (nums[l] + nums[r] == target) {
                        res.add(Arrays.asList(nums[i], nums[l], nums[r]));
                        while (l < r && nums[l] == nums[l + 1]) l += 1;
                        while (l < r && nums[r] == nums[r - 1]) r -= 1;
                        l += 1;
                        r -= 1;
                    } else if (nums[l] + nums[r] > target) r -= 1;
                    else l += 1;
                }
            }
            return res;


        }
    }

//runtime:30 ms
//memory:49.3 MB
